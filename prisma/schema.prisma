generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(255)
  content   String   @db.Text
  excerpt   String?  @db.Text
  status    Status   @default(DRAFT)
  imageUrl  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String      @db.VarChar(255)
  description String      @db.Text
  location    String      @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime
  status      EventStatus @default(UPCOMING)
  imageUrl    String?     @db.VarChar(255)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Theme {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  description String?   @db.Text
  fromColor   String    @db.VarChar(255)
  toColor     String    @db.VarChar(255)
  textColor   String    @db.VarChar(255)
  type        ThemeType
  category    String?   @db.VarChar(255)
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          User_role @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Account       Account[]
  Session       Session[]
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum User_role {
  USER
  ADMIN
  EDITOR
  MODERATOR
}

enum ThemeType {
  GLOBAL
  PROGRAM
  NEWS
  EVENTS
  CATEGORY
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  CLOSED
}

model Contact {
  id              String        @id @default(cuid())
  name            String
  email           String
  phone           String?
  subject         String
  message         String        @db.Text
  district        String?
  preferredContact String       @default("email")
  newsletter      Boolean       @default(false)
  status          ContactStatus @default(NEW)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("contacts")
}

enum SlideType {
  GRADIENT
  IMAGE
  VIDEO
}

model Slide {
  id           String    @id @default(cuid())
  type         SlideType
  title        String    @db.VarChar(255)
  subtitle     String?   @db.Text
  order        Int       @default(0)
  isActive     Boolean   @default(true)
  gradientFrom String?   @db.VarChar(255)
  gradientTo   String?   @db.VarChar(255)
  mediaUrl     String?   @db.VarChar(255)
  ctaText      String?   @db.VarChar(255)
  ctaLink      String?   @db.VarChar(255)
  // Videó mezők az új nevekkel
  videoType    String?   @db.VarChar(10)
  autoPlay     Boolean   @default(true)
  isLoop       Boolean   @default(true)
  isMuted      Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}